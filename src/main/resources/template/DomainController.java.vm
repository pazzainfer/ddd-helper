package ${config.basePackage}#if("$!{config.moduleName}"!="").${config.moduleName}#end.controller;

import com.changjinglu.api.common.response.*;
import com.changjinglu.api.common.vo.ListWithPaginatorVO;
import com.changjinglu.common.bean.BeanUtil;
import ${config.basePackage}.api.${table.entityClass}ControllerApi;
import ${config.basePackage}.domain.entity.${table.entityClass}Entity;
import ${config.basePackage}.domain.factory.${table.entityClass}Factory;
import ${config.basePackage}.domain.value.${table.entityClass}BuildVO;
import ${config.basePackage}.interfaces.query.${table.entityClass}QueryRepositoryParam;
import ${config.basePackage}.interfaces.vo.PageVO;
import ${config.basePackage}.param.*;
import ${config.basePackage}.result.${table.entityClass}DTO;
import ${config.basePackage}.service.api.${table.entityClass}Service;
import ${config.basePackage}.interfaces.vo.${table.entityClass}VO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import javax.annotation.Resource;
import java.util.List;

/**
 * <p>
 * ${table.tableComment} 前端控制器
 * </p>
 *
 * @author ${config.author}
 * @since ${config.dateStr}
 */
@RestController
#if( "$!config.moduleName" == "")
@RequestMapping("/${table.entityClass}")
#else
@RequestMapping("/${config.moduleName}/${table.entityName}")
#end
@Api(value = "${table.tableComment}API")
@Slf4j
public class ${table.entityClass}Controller implements ${table.entityClass}ControllerApi {

    @Resource
    private ${table.entityClass}Service ${table.entityName}Service;
    @Resource
    private ${table.entityClass}Factory ${table.entityName}Factory;

    @ApiOperation(value = "${table.tableComment}详情", notes = "${table.tableComment}详情")
    @PostMapping(value = "/detail")
    public PlainResult<${table.entityClass}DTO> detail(@RequestBody @ApiParam @Validated ${table.entityClass}DetailParam param) throws RuntimeException {
        return new PlainResult<>(BeanUtil.doTransfer(${table.entityName}Service.getById(param.getId()), ${table.entityClass}DTO.class));
    }

    @ApiOperation(value = "${table.tableComment}创建", notes = "${table.tableComment}创建")
    @PostMapping(value = "/sign")
    @Transactional(rollbackFor = Exception.class)
    public PlainResult<${table.entityClass}DTO> create(@RequestBody @ApiParam @Validated ${table.entityClass}SignParam param) throws RuntimeException {
        ${table.entityClass}Entity ${table.entityName}Entity = ${table.entityName}Factory.perfect(BeanUtil.doTransfer(param, ${table.entityClass}BuildVO.class));
        ${table.entityName}Entity.create();
        return new PlainResult<>(BeanUtil.doTransfer(${table.entityName}Entity, ${table.entityClass}DTO.class));
    }

    @ApiOperation(value = "${table.tableComment}更新", notes = "${table.tableComment}更新")
    @PostMapping(value = "/update")
    @Transactional(rollbackFor = Exception.class)
    public BaseResult update(@RequestBody @ApiParam @Validated ${table.entityClass}UpdateParam param) throws RuntimeException {
        ${table.entityClass}Entity ${table.entityName}Entity = ${table.entityName}Factory.perfect(BeanUtil.doTransfer(param, ${table.entityClass}BuildVO.class));
        ${table.entityName}Entity.update();
        return new PlainResult<>(BeanUtil.doTransfer(${table.entityName}Entity, ${table.entityClass}DTO.class));
    }

    @ApiOperation(value = "综合查询${table.tableComment}列表", notes = "综合查询条件查询${table.tableComment}")
    @PostMapping(value = "/query")
    public ListResult<${table.entityClass}DTO> query(
            @RequestBody @ApiParam @Validated ${table.entityClass}QueryParam param) throws RuntimeException {
        ${table.entityClass}QueryRepositoryParam ${table.entityName}Query =
                new ${table.entityClass}QueryRepositoryParam();
        BeanUtil.doTransfer(param, ${table.entityClass}Query);
        return new ListResult<>(BeanUtil.doTransfer(${table.entityName}Service.query(${table.entityName}Query), ${table.entityClass}DTO.class));
    }

    @ApiOperation(value = "分页查询${table.tableComment}列表", notes = "分页查询条件查询${table.tableComment}")
    @PostMapping(value = "/pageQuery")
    public PaginatorResult<${table.entityClass}DTO> pageQuery(
            @RequestBody @ApiParam @Validated ${table.entityClass}PageQueryParam param) throws RuntimeException {
        ${table.entityClass}QueryRepositoryParam ${table.entityName}Query =
                new ${table.entityClass}QueryRepositoryParam();
        BeanUtil.doTransfer(param, ${table.entityClass}Query);
        PageVO<${table.entityClass}VO> pageVO = ${table.entityName}Service.pageQuery(${table.entityName}Query);

        Paginator paginator = new Paginator((int) pageVO.getCurrent(),
                (int) pageVO.getSize(), (int) pageVO.getTotal());
        List<${table.entityClass}DTO> list = BeanUtil.doTransfer(pageVO.getRecords(), ${table.entityClass}DTO.class);

        ListWithPaginatorVO<${table.entityClass}DTO> paginatorVO = new ListWithPaginatorVO<>(paginator, list);

        return new PaginatorResult<>(paginatorVO);
    }
}
